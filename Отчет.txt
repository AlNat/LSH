1 - Весь код написан на Java. Использован фреймворк GWT. GWT содержит Java -> javascript компилятор. 

2 - GWT использует архитектуру MVP. Этим достагаеться ряд приемуществ в проектирование.

3 - Использование AJAX - все прилоение, по сути - одна страница. www.site.com#1 www.site.com#2 - примерно так наше прилоение выглядит

4 - Использование технологии RPC (толстый клиент - в противовес тонкому). Часть логики храниться в js скрипте на стороне клиента, в веб-странице, что позволяет снизить нагрузку на сервер.
 
5 - Микросервисная архитетура - несколько маленьких сервлетов, работающих автономно, каждый выполняет только одну роль. Один - производит исключительно аторизацию, другой - получает данные. 
 
6 - Использован асинхронные запросы к веб-серверу Tomcat, на котором и запущены сервлеты. Асинхронная работа в разы быстрее синхронной.

7 - Авторизация как на уровне приложения, так и на уровне базы. У каждого сервлета из пунта выше свой пользователь, со своим набором прав. Притом, пользователь в БД, через которого происходит авторизация крайне ограничен в правах -> повышение безопасности.

8 - Шифрование паролей. Пароли не храняться открытым тестом, а используеться MD5 хэш от пароля. Вставка голого пароля невозможна.

9 - Аутентефикация с занесением данных в cookies. Если есть куки, то заново входить не надо.
 
10 - Использование CSS и других возможностей в HTML5.

11 - Удобство. Фреймворк GWT используеться в большинстве продуктов Google.

12 - ООП! Полное следование принципам ООП во всех критериях

13 - MongoDB - самая оптимальная база данных, для работы с JSON файлами. Проверено Enterprise

14 - Vaadin vs GWT Слоный выбор. Vaadin - основан на GWT, но значительно сильнее нагруает сеть. 
